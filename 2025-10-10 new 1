Option Explicit

' === MAIN ENTRY POINT ===
Sub BuildAndCheckDictionaries()
    Dim prevDict As Object, currDict As Object
    Set prevDict = CreateObject("Scripting.Dictionary")
    Set currDict = CreateObject("Scripting.Dictionary")

    ' Build dictionaries from the two sheets
    BuildDictionary ThisWorkbook.Sheets("PrevOpps"), prevDict
    BuildDictionary ThisWorkbook.Sheets("CurrOpps"), currDict

    ' Compare them and generate the report
    CheckDictionaries prevDict, currDict
End Sub


' === STEP 1: BUILD DICTIONARY FROM A SHEET ===
Sub BuildDictionary(ws As Worksheet, ByRef dict As Object)
    Dim lastRow As Long
    Dim key As String
    Dim i As Long
    Dim colList As Variant
    Dim concatValues As String
    Dim col As Variant
    Dim val As String
    
    ' Columns we want to compare (S, W, X, AA, AC)
    colList = Array(19, 23, 24, 27, 29)
    
    lastRow = ws.Cells(ws.Rows.Count, "D").End(xlUp).Row
    
    For i = 2 To lastRow
        ' Composite key: D + "_" + P
        key = Trim$(CStr(ws.Cells(i, "D").Value)) & "_" & Trim$(CStr(ws.Cells(i, "P").Value))
        
        If key <> "_" Then ' Only add if valid
            concatValues = ""
            For Each col In colList
                val = Trim$(CStr(ws.Cells(i, col).Value))
                If val = "" Then val = " " ' prevent empty compare errors
                concatValues = concatValues & val & "|"
            Next col
            ' Remove trailing |
            If Right$(concatValues, 1) = "|" Then concatValues = Left$(concatValues, Len(concatValues) - 1)
            dict(key) = concatValues
        End If
    Next i
End Sub


' === STEP 2: COMPARE DICTIONARIES AND REPORT ===
Sub CheckDictionaries(prev As Object, curr As Object)
    Dim wsReport As Worksheet, wsPrev As Worksheet, wsCurr As Worksheet
    Dim dictKey As Variant
    Dim reportRow As Long
    Dim valsPrev As Variant, valsCurr As Variant
    Dim foundRow As Long
    Dim lastRowPrev As Long, lastRowCurr As Long
    Dim colCount As Long
    Dim j As Long
    Dim prevCols As Variant, prevColHeaders As Variant, changedColHeaders As Variant
    Dim valPrev As String, valCurr As String
    
    ' Define tracked columns (S, W, X, AA, AC)
    prevCols = Array(19, 23, 24, 27, 29)
    Set wsPrev = ThisWorkbook.Sheets("PrevOpps")
    Set wsCurr = ThisWorkbook.Sheets("CurrOpps")
    colCount = wsPrev.Cells(1, wsPrev.Columns.Count).End(xlToLeft).Column
    
    ' Prepare header arrays
    ReDim prevColHeaders(LBound(prevCols) To UBound(prevCols))
    ReDim changedColHeaders(LBound(prevCols) To UBound(prevCols))
    
    For j = LBound(prevCols) To UBound(prevCols)
        prevColHeaders(j) = "Prev " & wsPrev.Cells(1, prevCols(j)).Value
        
        ' Label Logic column specifically for W
        If prevCols(j) = 23 Then
            changedColHeaders(j) = "Logic"
        Else
            changedColHeaders(j) = "Changed " & wsPrev.Cells(1, prevCols(j)).Value
        End If
    Next j
    
    ' Create or clear the Report sheet
    On Error Resume Next
    Set wsReport = ThisWorkbook.Sheets("Report")
    On Error GoTo 0
    If wsReport Is Nothing Then
        Set wsReport = ThisWorkbook.Sheets.Add
        wsReport.Name = "Report"
    Else
        wsReport.Cells.Clear
    End If
    
    ' Copy header row
    wsPrev.Rows(1).Resize(1, colCount).Copy wsReport.Rows(1)
    
    ' Add headers for previous values
    For j = LBound(prevCols) To UBound(prevCols)
        wsReport.Cells(1, colCount + j + 1).Value = prevColHeaders(j)
    Next j
    
    ' Add headers for changed indicators / logic
    For j = LBound(prevCols) To UBound(prevCols)
        wsReport.Cells(1, colCount + UBound(prevCols) + j + 2).Value = changedColHeaders(j)
    Next j
    
    reportRow = 2
    
    lastRowPrev = wsPrev.Cells(wsPrev.Rows.Count, "D").End(xlUp).Row
    lastRowCurr = wsCurr.Cells(wsCurr.Rows.Count, "D").End(xlUp).Row
    
    ' === Compare current to previous ===
    For Each dictKey In curr.Keys
        If prev.Exists(dictKey) Then
            If prev(dictKey) = curr(dictKey) Then
                ' identical: skip
            Else
                foundRow = FindRowByKey(wsCurr, CStr(dictKey), lastRowCurr)
                If foundRow > 0 Then
                    wsCurr.Rows(foundRow).Resize(1, colCount).Copy wsReport.Rows(reportRow)
                    
                    valsPrev = Split(prev(dictKey), "|")
                    valsCurr = Split(curr(dictKey), "|")
                    
                    For j = LBound(prevCols) To UBound(prevCols)
                        ' safely handle missing values
                        On Error Resume Next
                        valPrev = Trim$(valsPrev(j))
                        valCurr = Trim$(valsCurr(j))
                        On Error GoTo 0
                        
                        If valPrev = "" Then valPrev = " "
                        If valCurr = "" Then valCurr = " "
                        
                        ' Highlight changed cells
                        If valCurr <> valPrev Then
                            wsReport.Cells(reportRow, prevCols(j)).Interior.Color = vbYellow
                        End If
                        
                        ' Fill previous value
                        wsReport.Cells(reportRow, colCount + j + 1).Value = valPrev
                        
                        ' Fill logic / changed indicator
                        wsReport.Cells(reportRow, colCount + UBound(prevCols) + j + 2).Value = (valCurr <> valPrev)
                    Next j
                    
                    reportRow = reportRow + 1
                End If
            End If
        Else
            ' New key in current sheet â†’ red row
            foundRow = FindRowByKey(wsCurr, CStr(dictKey), lastRowCurr)
            If foundRow > 0 Then
                wsCurr.Rows(foundRow).Resize(1, colCount).Copy wsReport.Rows(reportRow)
                wsReport.Rows(reportRow).Interior.Color = vbRed
                reportRow = reportRow + 1
            End If
        End If
    Next dictKey
    
    ' === Rows missing in current sheet (deleted) ===
    For Each dictKey In prev.Keys
        If Not curr.Exists(dictKey) Then
            foundRow = FindRowByKey(wsPrev, CStr(dictKey), lastRowPrev)
            If foundRow > 0 Then
                wsPrev.Rows(foundRow).Resize(1, colCount).Copy wsReport.Rows(reportRow)
                wsReport.Rows(reportRow).Interior.Color = RGB(255, 165, 0) ' Orange
                reportRow = reportRow + 1
            End If
        End If
    Next dictKey
    
    wsReport.Columns.AutoFit
    MsgBox "Report generated successfully in sheet 'Report'.", vbInformation
End Sub


' === FIND A ROW IN A SHEET BY UNIQUE KEY ===
Function FindRowByKey(ws As Worksheet, ByVal keyText As String, ByVal lastRow As Long) As Long
    Dim i As Long
    Dim testKey As String
    For i = 2 To lastRow
        testKey = Trim$(CStr(ws.Cells(i, "D").Value)) & "_" & Trim$(CStr(ws.Cells(i, "P").Value))
        If testKey = keyText Then
            FindRowByKey = i
            Exit Function
        End If
    Next i
    FindRowByKey = 0
End Function
