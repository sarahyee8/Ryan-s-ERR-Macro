Sub BuildPrevAndCurrDictionaries()
    Dim wsPrev As Worksheet, wsCurr As Worksheet
    Dim lastRowPrev As Long, lastRowCurr As Long
    Dim i As Long
    Dim key As String, valueStr As String
    Dim prev As Object, curr As Object
    Dim dictKey As Variant   ' <-- Use Variant for looping keys
    
    ' Create dictionaries
    Set prev = CreateObject("Scripting.Dictionary")
    Set curr = CreateObject("Scripting.Dictionary")
    
    ' Set worksheets
    Set wsPrev = ThisWorkbook.Sheets("PrevOpps")
    Set wsCurr = ThisWorkbook.Sheets("CurrOpps")
    
    ' Find last rows
    lastRowPrev = wsPrev.Cells(wsPrev.Rows.Count, "D").End(xlUp).Row
    lastRowCurr = wsCurr.Cells(wsCurr.Rows.Count, "D").End(xlUp).Row
    
    ' === Build prev dictionary ===
    For i = 2 To lastRowPrev
        key = Trim(wsPrev.Cells(i, "D").Value) & "_" & Trim(wsPrev.Cells(i, "P").Value)
        'ERR Risk Amount, ERR Net Forecast, Year Quarter Month, Sales Group, ERR Territory, Month and Quarter'
        valueStr = Join(Array(wsPrev.Cells(i, "S").Value, _
                      wsPrev.Cells(i, "W").Value, _
                      wsPrev.Cells(i, "T").Value, _
                      wsPrev.Cells(i, "O").Value, _
                      wsPrev.Cells(i, "G").Value, _
                      wsPrev.Cells(i, "AA").Value), "|")
        prev(key) = valueStr
    Next i
    
    ' === Build curr dictionary ===
    For i = 2 To lastRowCurr
        key = Trim(wsCurr.Cells(i, "D").Value) & "_" & Trim(wsCurr.Cells(i, "P").Value)
        'ERR Risk Amount, ERR Net Forecast, Year Quarter Month, Sales Group, ERR Territory, Month and Quarter'
        valueStr = Join(Array(wsPrev.Cells(i, "S").Value, _
                      wsPrev.Cells(i, "W").Value, _
                      wsPrev.Cells(i, "T").Value, _
                      wsPrev.Cells(i, "O").Value, _
                      wsPrev.Cells(i, "G").Value, _
                      wsPrev.Cells(i, "AA").Value), "|")

        curr(key) = valueStr
    Next i
    
    ' === Print dictionaries ===
    Debug.Print "=== PREV Dictionary ==="
    For Each dictKey In prev.Keys
        Debug.Print dictKey & " -> " & prev(dictKey)
    Next dictKey
    
    Debug.Print "=== CURR Dictionary ==="
    For Each dictKey In curr.Keys
        Debug.Print dictKey & " -> " & curr(dictKey)
    Next dictKey
    
    ' === Call the check procedure ===
    Call CheckDictionaries(prev, curr)
End Sub

Option Explicit

Sub CheckDictionaries(prev As Object, curr As Object)
    Dim wsReport As Worksheet, wsPrev As Worksheet, wsCurr As Worksheet
    Dim dictKey As Variant
    Dim reportRow As Long
    Dim valsPrev As Variant, valsCurr As Variant
    Dim foundRow As Long
    Dim lastRowPrev As Long, lastRowCurr As Long
    Dim colCount As Long, changeCol As Long
    Dim j As Long, maxIdx As Long
    Dim prevS As Double, currS As Double, changeVal As Double
    
    ' Source sheets
    Set wsPrev = ThisWorkbook.Sheets("PrevOpps")
    Set wsCurr = ThisWorkbook.Sheets("CurrOpps")
    colCount = wsPrev.Cells(1, wsPrev.Columns.Count).End(xlToLeft).Column
    
    ' Create/clear the Report sheet
    On Error Resume Next
    Set wsReport = ThisWorkbook.Sheets("Report")
    On Error GoTo 0
    If wsReport Is Nothing Then
        Set wsReport = ThisWorkbook.Sheets.Add
        wsReport.Name = "Report"
    Else
        wsReport.Cells.Clear
    End If
    
    ' Copy header from prev
    wsPrev.Rows(1).Resize(1, colCount).Copy wsReport.Rows(1)
    
    ' Add the new trailing header for the delta on column S
    changeCol = colCount + 1
    wsReport.Cells(1, changeCol).Value = "Change in Amount"
    
    reportRow = 2
    lastRowPrev = wsPrev.Cells(wsPrev.Rows.Count, "D").End(xlUp).Row
    lastRowCurr = wsCurr.Cells(wsCurr.Rows.Count, "D").End(xlUp).Row
    
    ' === Step 1: Loop through keys in curr ===
    For Each dictKey In curr.Keys
        If prev.Exists(dictKey) Then
            If prev(dictKey) = curr(dictKey) Then
                ' Identical across tracked fields -> skip
            Else
                ' Different -> copy as VALUES (no fill), highlight changed tracked columns, compute delta on S
                foundRow = FindRowByKey(wsCurr, CStr(dictKey), lastRowCurr)
                If foundRow > 0 Then
                    ' Paste values only to avoid carrying over fills
                    wsReport.Rows(reportRow).Resize(1, colCount).Value = _
                        wsCurr.Rows(foundRow).Resize(1, colCount).Value
                    
                    valsPrev = Split(prev(dictKey), "|")
                    valsCurr = Split(curr(dictKey), "|")
                    
                    ' Map tracked fields (order in dictionary values): S, W, T, O, G, AA
                    ' Column letters -> numbers: S=19, W=23, T=20, O=15, G=7, AA=27
                    maxIdx = UBound(valsCurr)
                    If UBound(valsPrev) < maxIdx Then maxIdx = UBound(valsPrev)
                    
                    For j = 0 To maxIdx
                        If valsCurr(j) <> valsPrev(j) Then
                            Select Case j
                                Case 0: wsReport.Cells(reportRow, 19).Interior.Color = vbYellow   ' S
                                Case 1: wsReport.Cells(reportRow, 23).Interior.Color = vbYellow   ' W
                                Case 2: wsReport.Cells(reportRow, 20).Interior.Color = vbYellow   ' T
                                Case 3: wsReport.Cells(reportRow, 15).Interior.Color = vbYellow   ' O
                                Case 4: wsReport.Cells(reportRow, 7).Interior.Color = vbYellow    ' G
                                Case 5: wsReport.Cells(reportRow, 27).Interior.Color = vbYellow   ' AA
                            End Select
                        End If
                    Next j
                    
                    ' Change in Amount (delta on S)
                    currS = ParseNumber(valsCurr(0))
                    prevS = ParseNumber(valsPrev(0))
                    changeVal = currS - prevS
                    wsReport.Cells(reportRow, changeCol).Value = changeVal
                    If changeVal <> 0 Then wsReport.Cells(reportRow, changeCol).Interior.Color = vbYellow
                    
                    reportRow = reportRow + 1
                End If
            End If
        Else
            ' New key in curr -> copy values, mark row (red), delta = +curr.S
            foundRow = FindRowByKey(wsCurr, CStr(dictKey), lastRowCurr)
            If foundRow > 0 Then
                wsReport.Rows(reportRow).Resize(1, colCount).Value = _
                    wsCurr.Rows(foundRow).Resize(1, colCount).Value
                
                
                valsCurr = Split(curr(dictKey), "|")
                currS = ParseNumber(valsCurr(0))
                wsReport.Cells(reportRow, changeCol).Value = currS
                If currS <> 0 Then wsReport.Cells(reportRow, changeCol).Interior.Color = vbYellow
                
                reportRow = reportRow + 1
            End If
        End If
    Next dictKey
    
    ' === Step 2: Keys in prev but missing in curr ===
    For Each dictKey In prev.Keys
        If Not curr.Exists(dictKey) Then
            foundRow = FindRowByKey(wsPrev, CStr(dictKey), lastRowPrev)
            If foundRow > 0 Then
                wsReport.Rows(reportRow).Resize(1, colCount).Value = _
                    wsPrev.Rows(foundRow).Resize(1, colCount).Value
                wsReport.Rows(reportRow).Interior.Color = RGB(255, 165, 0) ' Orange
                
                valsPrev = Split(prev(dictKey), "|")
                prevS = ParseNumber(valsPrev(0))
                wsReport.Cells(reportRow, changeCol).Value = -prevS
                If prevS <> 0 Then wsReport.Cells(reportRow, changeCol).Interior.Color = vbYellow
                
                reportRow = reportRow + 1
            End If
        End If
    Next dictKey
    
    ' Readability
    wsReport.Columns.AutoFit
End Sub

' === Helper to find row by dictionary key (D + P) ===
Function FindRowByKey(ws As Worksheet, ByVal keyText As String, ByVal lastRow As Long) As Long
    Dim i As Long
    Dim testKey As String
    
    For i = 2 To lastRow
        testKey = Trim$(CStr(ws.Cells(i, "D").Value)) & "_" & Trim$(CStr(ws.Cells(i, "P").Value))
        If testKey = keyText Then
            FindRowByKey = i
            Exit Function
        End If
    Next i
    FindRowByKey = 0
End Function

' === Helper: robust numeric parsing for $/comma/N/A strings ===
Private Function ParseNumber(ByVal v As Variant) As Double
    Dim s As String
    s = Trim$(CStr(v))
    If s = "" Or UCase$(s) = "N/A" Then
        ParseNumber = 0
    Else
        s = Replace(s, ",", "")
        s = Replace(s, "$", "")
        On Error Resume Next
        ParseNumber = CDbl(s)
        On Error GoTo 0
    End If
End Function


